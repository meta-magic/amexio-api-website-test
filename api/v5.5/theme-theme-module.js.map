{"version":3,"sources":["webpack:///./node_modules/ngx-cookie-service/cookie-service/cookie.service.js","webpack:///./node_modules/ngx-cookie-service/index.js","webpack:///./src/app/theme/theme.component.ts","webpack:///./src/app/theme/theme.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACmD;AACR;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,mDAAmD;AACnD;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD,EAAE,UAAU;AAC5D,oDAAoD,kCAAkC;AACtF;AACA;AACA,CAAC;AACwB;AACzB;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA,4CAA4C;AAC5C,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,IAAI;AAC3E,EAAE;AACF,0C;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAgD;AAChD,iC;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;GAEG;AAC6C;AACA;AACG;AAgHnD;IAOE,wBAAoB,IAAgB,EAAU,aAA4B;QAAtD,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAe;QAH1E,iBAAY,GAAa,KAAK,CAAC;IAI/B,CAAC;IAGD,iCAAQ,GAAR;QAAA,iBAmBC;QAjBC,IAAI,QAAY,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2CAA2C,EAAC,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,SAAS,CAAC,cAAI;YAC5F,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC,EAAE,eAAK;QACR,CAAC,EAAE;YACD,KAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAE9B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kDAAkD,EAAC,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,SAAS,CAAC,cAAI;YACrG,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC,EAAE,eAAK;QACR,CAAC,EAAE;YACD,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAElC,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,oCAAW,GAAX,UAAY,QAAa,EAAC,aAAmB;QAA7C,iBAUC;QATC,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,GAAG;YACd,KAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAE1C,CAAC,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,GAAG,SAAS,CAAC;QACtB,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QACvB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,uBAAuB;IACvB,4CAAmB,GAAnB,UAAoB,OAAY;QAC9B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,SAAS,CAAC,CAAC,CAAC;oBACxB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,oCAAW,GAAX,UAAY,KAAU;QACpB,IAAI,CAAC,YAAY,GAAG,gBAAgB,GAAG,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC;QACnE,IAAI,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,0BAAwB,CAAC,CAAC;QAC5E,0CAA0C;QAC1C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAC,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;IAC9D,CAAC;IA/DU,cAAc;QA/G1B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,QAAQ,EAAE,6mNA2GT;SACF,CAAC;yCAQ0B,+DAAU,EAAyB,gEAAa;OAP/D,cAAc,CAkE1B;IAAD,qBAAC;CAAA;AAlE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrH3B;;GAEG;AACsC;AACc;AACN;AACJ;AACF;AACa;AACF;AACH;AAEnD,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,+DAAc,EAAE;CACxC,CAAC;AAQF;IAAA;IAA2B,CAAC;IAAf,WAAW;QANvB,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,EAAC,qEAAgB,EAAC,0DAAW,EAAC,uEAAkB,EAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACrG,OAAO,EAAE,CAAC,4DAAY,CAAC;YACvB,YAAY,EAAG,CAAC,+DAAc,CAAC;YAC/B,SAAS,EAAG,CAAC,gEAAa,CAAC;SAC5B,CAAC;OACW,WAAW,CAAI;IAAD,kBAAC;CAAA;AAAJ;AAEjB,IAAM,gBAAgB,GAAG,CAAC,+DAAc,CAAC,CAAC","file":"theme-theme-module.js","sourcesContent":["// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\nimport { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nvar CookieService = (function () {\n    function CookieService(\n        // The type `Document` may not be used here. Although a fix is on its way,\n        // we will go with `any` for now to support Angular 2.4.x projects.\n        // Issue: https://github.com/angular/angular/issues/12631\n        // Fix: https://github.com/angular/angular/pull/14894\n        document) {\n        this.document = document;\n        // To avoid issues with server side prerendering, check if `document` is defined.\n        this.documentIsAccessible = document !== undefined;\n    }\n    /**\n     * @param name Cookie name\n     * @returns {boolean}\n     */\n    CookieService.prototype.check = function (name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        var regExp = this.getCookieRegExp(name);\n        var exists = regExp.test(this.document.cookie);\n        return exists;\n    };\n    /**\n     * @param name Cookie name\n     * @returns {any}\n     */\n    CookieService.prototype.get = function (name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            var regExp = this.getCookieRegExp(name);\n            var result = regExp.exec(this.document.cookie);\n            return decodeURIComponent(result[1]);\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * @returns {}\n     */\n    CookieService.prototype.getAll = function () {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        var cookies = {};\n        var document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            var split = document.cookie.split(';');\n            for (var i = 0; i < split.length; i += 1) {\n                var currentCookie = split[i].split('=');\n                currentCookie[0] = currentCookie[0].replace(/^ /, '');\n                cookies[decodeURIComponent(currentCookie[0])] = decodeURIComponent(currentCookie[1]);\n            }\n        }\n        return cookies;\n    };\n    /**\n     * @param name    Cookie name\n     * @param value   Cookie value\n     * @param expires Number of days until the cookies expires or an actual `Date`\n     * @param path    Cookie path\n     * @param domain  Cookie domain\n     * @param secure  Secure flag\n     */\n    CookieService.prototype.set = function (name, value, expires, path, domain, secure) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        if (expires) {\n            if (typeof expires === 'number') {\n                var dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + expires.toUTCString() + ';';\n            }\n        }\n        if (path) {\n            cookieString += 'path=' + path + ';';\n        }\n        if (domain) {\n            cookieString += 'domain=' + domain + ';';\n        }\n        if (secure) {\n            cookieString += 'secure;';\n        }\n        this.document.cookie = cookieString;\n    };\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    CookieService.prototype.delete = function (name, path, domain) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        this.set(name, '', -1, path, domain);\n    };\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    CookieService.prototype.deleteAll = function (path, domain) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        var cookies = this.getAll();\n        for (var cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain);\n            }\n        }\n    };\n    /**\n     * @param name Cookie name\n     * @returns {RegExp}\n     */\n    CookieService.prototype.getCookieRegExp = function (name) {\n        var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    };\n    return CookieService;\n}());\nexport { CookieService };\nCookieService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nCookieService.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n]; };\n//# sourceMappingURL=cookie.service.js.map","export * from './cookie-service/cookie.service';\n//# sourceMappingURL=index.js.map","/**\n * Created by sagar on 11/1/18.\n */\nimport {Component, OnInit} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport { CookieService } from 'ngx-cookie-service';\n@Component({\n  selector: 'theme-page',\n  template: `\n\n    <amexio-image [path]=\"'assets/images/logos/amexio_colors.jpeg'\"[tooltip]=\"'Image'\"></amexio-image>\n\n    <amexio-tab-view  [closable]=\"false\">\n        <amexio-tab title=\"Material Design\" [active]=\"true\">\n            <amexio-row *ngFor=\"let row of mdThemeData\">\n                <amexio-column [size]=\"(12/row.length)\" *ngFor=\"let col of row\">\n                    <div class=\"card-container\">\n                        <header class=\"card-header flex-start\" [ngStyle]=\"{'background-color':col.navBarBGColor, 'color':col.navBarFontColor}\" >\n                            <amexio-label>{{col.themeName}}</amexio-label>\n                        </header>\n                        <div class=\"card-body cardbody\">\n                            <amexio-image [path]=\"'assets/images/theme-icons/'+col.link\"></amexio-image> <br/>\n                            <amexio-label [size]=\"'small'\">Version: {{col.version}}</amexio-label> <br/>\n                            <amexio-label>Style: {{col.style}}</amexio-label> <br/>\n                        </div> \n                        <footer class=\"card-footer flex-end\">\n                            <amexio-button [label]=\"'Test'\" [type]=\"'default'\" (onClick)=\"themeChange(col)\"></amexio-button>\n                        </footer>\n                    </div>\n                </amexio-column>\n            </amexio-row>\n        </amexio-tab>\n        <amexio-tab title=\"Amexio\">\n            <amexio-row *ngFor=\"let row of amexioThemeData\">\n                <amexio-column [size]=\"(12/row.length)\" *ngFor=\"let col of row\">\n                    <div class=\"card-container\">\n                        <header class=\"card-header flex-start\" [ngStyle]=\"{'background-color':col.navBarBGColor, 'color':col.navBarFontColor}\" >\n                            <amexio-label>{{col.themeName}}</amexio-label>\n                        </header>\n                        <div class=\"card-body cardbody\">\n                            <amexio-image [path]=\"'assets/images/theme-icons/'+col.link\"></amexio-image> <br/>\n                            <amexio-label [size]=\"'small'\">Version: {{col.version}}</amexio-label> <br/>\n                            <amexio-label>Style: {{col.style}}</amexio-label> <br/>\n                        </div> \n                    </div>\n                </amexio-column>\n            </amexio-row>\n        </amexio-tab>\n        <amexio-tab title=\"Colors\">\n        Eventually we can apply this attribute [amexio-color] to all components, currently we can apply to progress bar and datapoints. \n        To know more refer the API reference section\n        <amexio-datagrid title=\"Amexio Colors\" [enable-column-fiter]=\"false\"\n        [http-method]=\"'get'\"\n        [http-url]=\"'assets/data/theme/amexio-colours.json'\"\n        [data-reader]=\"'colors'\"\n        [enable-data-filter]=\"false\">\n<amexio-data-table-column [width]=\"15\" [data-index]=\"'name'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                   [text]=\"'Name'\"></amexio-data-table-column>\n<amexio-data-table-column [width]=\"15\" [data-index]=\"'css'\" [data-type]=\"'string'\" [hidden]=\"false\"\n[text]=\"'CSS Class Name'\"><ng-template #amexioBodyTmpl let-column let-row=\"row\">\n<span>\n[amexio-color] = '{{row.css}}' </span>\n</ng-template>\n</amexio-data-table-column>\n<amexio-data-table-column [width]=\"15\" [data-index]=\"'BG'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                   [text]=\"'Color'\">\n                   <ng-template #amexioBodyTmpl let-column let-row=\"row\">\n                   <span>\n                    <div [ngStyle]=\"{'background-color':row.BG, 'color' : row.font}\">\n                    This is amexio color {{ row.name }} background <b> {{ row.BG }} </b> with opposite font color <b> {{ row.font }} </b>             \n                    </div>                  \n                   </span>\n                    </ng-template>\n                   </amexio-data-table-column>\n</amexio-datagrid>\n        </amexio-tab>\n        <amexio-tab title=\"Getting Started\">\n        <amexio-label size=\"large\">To install the Amexio Colors:</amexio-label>\n        <amexio-box background-color=\"blue\" border=\"left\" border-color=\"blue\" padding=\"true\">\n            <amexio-label size=\"medium-bold\">$ sudo npm install -g amexio-colors</amexio-label>\n        </amexio-box>\n        <amexio-label size=\"large\">Check the Amexio Colors version:</amexio-label>\n        <amexio-box background-color=\"blue\" border=\"left\" border-color=\"blue\" padding=\"true\" >\n            <amexio-label size=\"medium-bold\"> $ ac </amexio-label><br/>\n            <amexio-label> Amexio Colors v1.0 </amexio-label><br/>\n            <amexio-label> Copyright (c) 2018, MetaMagic Global Inc, NJ, USA </amexio-label><br/>\n            <amexio-label> ..... </amexio-label><br/>\n        </amexio-box>\n        <amexio-label size=\"large\">To Generate Amexio Material Design Themes</amexio-label>\n        \n        <amexio-box background-color=\"blue\" border=\"left\" border-color=\"blue\" padding=\"true\" >       \n        <amexio-label size=\"medium-bold\">$ pwd</amexio-label><br/>\n        <amexio-label size=\"medium\">/home/user/</amexio-label><br/><br/>\n        <amexio-label size=\"medium-bold\">$ mkdir mythemes</amexio-label><br/>\n        <amexio-label size=\"medium-bold\">$ echo \"// Amexio Themes v0.0 \" >> Themes-Data.txt</amexio-label><br/>\n        <amexio-label size=\"medium-bold\">$ echo \"// Design-Type : Material Design \" >> Themes-Data.txt</amexio-label><br/>\n        <amexio-label size=\"medium-bold\">$ echo \"// Theme-Version : 4.0 \" >> Themes-Data.txt</amexio-label><br/>\n        <amexio-label size=\"medium-bold\">$ echo \"army-olive,#4B5320,#708238\" >> Themes-Data.txt</amexio-label><br/>\n        <amexio-label size=\"medium-bold\">$ echo \"ash-stone-black,#544C4A,#877F7D\" >> Themes-Data.txt</amexio-label><br/>\n        <br />\n        <amexio-label size=\"medium-bold\">$ ac Themes-Data.txt /home/user/mythemes/</amexio-label><br/>\n        </amexio-box>\n        <amexio-label size=\"large\"> Amexio Colors API Documentation</amexio-label>\n        <p>\n        <amexio-label>\n            Checkout the Amexio Colors API Documentation published in </amexio-label>\n            <a href=\"https://meta-magic.github.io/AmexioColors/\" target=\"_blank\"> GitHub Pages</a>\n            <br/>\n            <amexio-label>For Testing the Themes Autogenerated by the Amexio Colors Checkout the Amexio</amexio-label>\n            <a href=\"https://api.amexio.org\" target=\"_blank\"> API Site</a>\n        </p>\n            \n        </amexio-tab>\n    </amexio-tab-view>\n\n  `\n})\nexport class ThemeComponent implements OnInit {\n  \n  mdThemeData : any;\n  amexioThemeData : any;\n  hasThemeInit : boolean = false;\n  newThemePath : string;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) {\n  }\n\n\n  ngOnInit() {\n\n    let response:any;\n\n    this.http.get('assets/data/theme/theme-api-showcase.json',{responseType: 'json'}).subscribe(data => {\n        response = data;\n      }, error => {\n      }, () => {\n        this.mdThemeData = response;\n        \n      });\n\n      this.http.get('assets/data/theme/theme-api-showcase-amexio.json',{responseType: 'json'}).subscribe(data => {\n        response = data;\n      }, error => {\n      }, () => {\n        this.amexioThemeData = response;\n        \n      });      \n  }\n\n  \n  addNewTheme(newTheme: any,existingTheme : any) {\n    let linkEl = document.createElement('link');\n    linkEl.onload = ()=>{\n      this.removeExistingTheme(existingTheme);\n    \n    };\n    linkEl.setAttribute('rel', 'stylesheet');\n    linkEl.id = 'themeid';\n    linkEl.href = newTheme;\n    document.head.appendChild(linkEl);\n  }\n\n  //removed old theme css\n  removeExistingTheme(keyList: any) {\n    if (keyList != null && keyList && keyList.length != 0) {\n      for (let i=0; i<keyList.length; i++) {\n        let key = keyList[i];\n        if (key.id == 'themeid') {\n          document.head.removeChild(key);\n        }\n      }\n    }\n  }  \n  \n  themeChange(theme: any) {\n    this.newThemePath = 'assets/themes/' + theme.themeCssFile + '.css';\n    let currentTheme = document.head.querySelectorAll(`link[rel=\"stylesheet\"]`);\n    // this.removeExistingTheme(currentTheme);\n    this.addNewTheme(this.newThemePath,currentTheme);\n    this.cookieService.set('theme_name_v4', theme.themeCssFile);\n  }\n\n\n}\n\n\n","/**\n * Created by Ketan on 16/1/18.\n */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {CookieService} from 'ngx-cookie-service';\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {AmexioWidgetModule} from \"amexio-ng-extensions\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport { ThemeComponent } from './theme.component';\n\nconst routes: Routes = [\n  { path: '', component: ThemeComponent },\n];\n\n@NgModule({\n  imports: [CommonModule,HttpClientModule,FormsModule,AmexioWidgetModule,RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations : [ThemeComponent],\n  providers : [CookieService]\n})\nexport class ThemeModule { }\n\nexport const routedComponents = [ThemeComponent];\n"],"sourceRoot":""}