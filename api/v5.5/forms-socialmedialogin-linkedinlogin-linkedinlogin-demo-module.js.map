{"version":3,"sources":["webpack:///./src/app/forms/socialmedialogin/linkedinlogin/linkedinlogin.demo.module.ts","webpack:///./src/app/forms/socialmedialogin/linkedinlogin/linkedinlogin.demo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAuC;AACM;AACW;AACb;AACE;AACO;AACE;AACG;AACzD;;GAEG;AAQH;IAAA;IAEA,CAAC;IAFY,mBAAmB;QAP/B,8DAAQ,CAAC;YACR,YAAY,EAAE,CAAC,qEAAiB,CAAC;YACjC,OAAO,EAAE,CAAC,4DAAY,EAAE,0DAAW,EAAE,qEAAgB,EAAE,2DAAY,EAAE,uEAAkB,EAAE,4DAAY,CAAC,QAAQ,CAAC,CAAC;wBAC9G,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qEAAiB,EAAE,SAAS,EAAE,MAAM;qBAC1D,CAAC,CAAC,CAAC;YACJ,SAAS,EAAE,EAAE;SACd,CAAC;OACW,mBAAmB,CAE/B;IAAD,0BAAC;CAAA;AAF+B;;;;;;;;;;;;;;;;;;;;;;;;;;AClBhC;;GAEG;AACqC;AACQ;AAoGhD;IAKE,2BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAClC,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IAED,wCAAY,GAAZ,UAAa,IAAS;QACpB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,mCAAmC;IACnC,oDAAwB,GAAxB;QAAA,iBAoBC;QAnBC,IAAI,YAAiB,CAAC;QACtB,IAAI,UAAe,CAAC;QAEpB,YAAY;QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gDAAgD,EAAE,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,SAAS,CAAC,cAAI;YACpG,YAAY,GAAG,IAAI,CAAC;QACtB,CAAC,EAAE,eAAK;QACR,CAAC,EAAE;YACD,KAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,UAAU;QACV,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gDAAgD,EAAE,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,SAAS,CAAC,cAAI;YACpG,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC,EAAE,eAAK;QACR,CAAC,EAAE;YACD,KAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACnC,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,uDAAuD;IACvD,uCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IA5CU,iBAAiB;QAlG7B,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB,EAAE,QAAQ,EAAE,+/JA+F1C;SACF,CAAC;yCAM0B,+DAAU;OALzB,iBAAiB,CA6C7B;IAAD,wBAAC;CAAA;AA7C6B","file":"forms-socialmedialogin-linkedinlogin-linkedinlogin-demo-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {AmexioWidgetModule} from 'amexio-ng-extensions';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from '../../../shared.module';\nimport {HttpClientModule} from '@angular/common/http';\nimport { LinkedinLoginDemo } from './linkedinlogin.demo';\n/**\n * Created by sagar on 25/1/19.\n */\n@NgModule({\n  declarations: [LinkedinLoginDemo],\n  imports: [CommonModule, FormsModule, HttpClientModule, SharedModule, AmexioWidgetModule, RouterModule.forChild([{\n    path: '', component: LinkedinLoginDemo, pathMatch: 'full'\n  }])],\n  providers: []\n})\nexport class LinkedinLoginModule {\n\n}\n","/**\n * Created by sagar on 25/1/19.\n */\nimport {Component} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Component({\n  selector: 'linkedin-login-demo', template: `\n    <amexio-card header=\"true\" [body-height]=\"80\">\n      <amexio-header>\n       Linkedin Login\n      </amexio-header>\n      <amexio-body>\n        <p>Amexio Linkedin Sign-In component manages the OAuth flow and token lifecycle,\n         simplifying your integration with Linkedin APIs using amexio component.</p>\n        <amexio-tab-view>\n          <amexio-tab title=\"Demo\" active=\"true\">\n            <amexio-row>\n              <amexio-column size=\"4\">\n              <amexio-card header=\"true\" [body-height]=\"50\">\n              <amexio-header>\n             Demo\n            </amexio-header>\n              <amexio-body>\n              <amexio-social [api-key]=\"'813fmfeb1398lq'\" [type]=\"'linkedin'\" (onLogin)=\"onLoginClick($event)\"></amexio-social>\n              </amexio-body>\n              </amexio-card>\n               </amexio-column>\n              <amexio-column size=\"8\">\n              <amexio-card header=\"true\" [body-height]=\"50\">\n              <amexio-header>\n             User Info After Login\n            </amexio-header>\n              <amexio-body>\n             <amexio-row>\n             <amexio-column size=\"12\" [fit]=\"true\">\n             {{linkedinLoginData|json}}\n             </amexio-column>\n             </amexio-row>\n              </amexio-body>\n              </amexio-card>\n              </amexio-column>\n            </amexio-row>\n          </amexio-tab>\n          <amexio-tab title=\"API Reference\">\n          <amexio-box border-color=\"brown\" border=\"left\" padding=\"true\" background-color=\"brown\">\n          <amexio-label>\n            Make sure api-key is created before use this component.refer Linkedin developer webside to create key <a href=\"https://developer.linkedin.com/docs/signin-with-linkedin\" target=\"_blank\">Linkedin Sign-In</a>\n            <br/><br/>\n          </amexio-label>\n        </amexio-box>\n        <br>\n            <amexio-datagrid title=\"Properties <amexio-social>\" [enable-column-fiter]=\"false\"\n                             [http-method]=\"'get'\"\n                             [http-url]=\"'assets/apireference/forms/linkedinlogin.json'\"\n                             [data-reader]=\"'properties'\"\n                             [enable-data-filter]=\"false\">\n              <amexio-data-table-column [width]=\"10\" [data-index]=\"'name'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Name'\"></amexio-data-table-column>\n              <amexio-data-table-column [width]=\"10\" [data-index]=\"'type'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Type'\"></amexio-data-table-column>\n              <amexio-data-table-column [width]=\"10\" [data-index]=\"'default'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Default'\"></amexio-data-table-column>\n              <amexio-data-table-column [width]=\"65\" [data-index]=\"'description'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Description'\"></amexio-data-table-column>\n\n            </amexio-datagrid>\n            <br>\n            <amexio-datagrid title=\"Events <amexio-social> \" [http-method]=\"'get'\"\n                             [http-url]=\"'assets/apireference/forms/linkedinlogin.json'\" [data-reader]=\"'events'\"\n                             [enable-data-filter]=\"false\">\n              <amexio-data-table-column [width]=\"20\"[data-index]=\"'name'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Name'\"></amexio-data-table-column>\n              <amexio-data-table-column [width]=\"80\" [data-index]=\"'description'\" [data-type]=\"'string'\" [hidden]=\"false\"\n                                        [text]=\"'Description'\"></amexio-data-table-column>\n            </amexio-datagrid>\n\n          </amexio-tab>\n          <amexio-tab title=\"Source\">\n            <div style=\"overflow-y: scroll\">\n            <amexio-vertical-tab-view>\n              <amexio-tab title=\"HTML\" [active]=\"true\">\n                <ng-container *ngIf=\"htmlCode\">\n                  <!--<clip-copy [htmlCode]=\"htmlCode\" (onClick)=\"onCopyClick()\"></clip-copy>-->\n                  <prism-block [code]=\"htmlCode\" [language]=\"'html'\"></prism-block>\n                </ng-container>\n              </amexio-tab>\n              <amexio-tab title=\"Type Script\">\n                <ng-container *ngIf=\"typeScriptCode\">\n                  <prism-block [code]=\"typeScriptCode\" [language]=\"'typescript'\"></prism-block>\n                </ng-container>\n              </amexio-tab>\n            </amexio-vertical-tab-view>\n            </div>\n          </amexio-tab>\n          <amexio-tab title=\"Live\" [disabled]=\"true\">\n            <p align=\"center\">Amexio Sandbox</p>\n          </amexio-tab>\n        </amexio-tab-view>\n      </amexio-body>\n    </amexio-card>\n    <!--<amexio-notification [data]=\"copyMsgArray\"></amexio-notification>-->\n  `\n})\nexport class LinkedinLoginDemo {\n  htmlCode: string;\n  typeScriptCode: string;\n  copyMsgArray: any[];\n  linkedinLoginData: any;\n  constructor(private http: HttpClient) {\n    this.getHtmlAndTypeScriptCode();\n  }\n\n  onLoginClick(data: any) {\n    this.linkedinLoginData = data;\n  }\n\n  // TO LOAD HTML AND TYPESCRIPT CODE\n  getHtmlAndTypeScriptCode() {\n    let responseHtml: any;\n    let responseTs: any;\n\n    // HTML FILE\n    this.http.get('assets/data/code/forms/linkedinlogin/form.html', {responseType: 'text'}).subscribe(data => {\n      responseHtml = data;\n    }, error => {\n    }, () => {\n      this.htmlCode = responseHtml;\n    });\n\n    // TS FILE\n    this.http.get('assets/data/code/forms/linkedinlogin/form.text', {responseType: 'text'}).subscribe(data => {\n      responseTs = data;\n    }, error => {\n    }, () => {\n      this.typeScriptCode = responseTs;\n    });\n\n  }\n\n  // THIS METHOD USED FOR COPY THE HTML & TYPESCRIPT CODE\n  onCopyClick() {\n    if (this.copyMsgArray.length >= 1) {\n      this.copyMsgArray = [];\n      this.copyMsgArray.push({'msg': 'Code Copied', 'type': 'info'});\n    } else {\n      this.copyMsgArray.push({'msg': 'Code Copied', 'type': 'info'});\n    }\n  }\n}\n\n\n"],"sourceRoot":""}