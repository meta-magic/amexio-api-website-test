(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{IOFq:function(e,o){e.exports='<amexio-api-structure [url]="\'assets/componentjson/directive/input-mask.json\'">\n  <amexio-api-accessible>\n    <amexio-box border-color="blue" border="left" [padding]="true" align="left">\n      <p>The Textinput/NumberInput is WAI ARIA-accessible through the Tab key.</p>\n      <p>Role:Input-The input role defines its type.</p>\n      <p>Role:Text-The text role defines its type.It consist of aria-labelledby and aria-describedby.</p>\n      <p>Role:Tooltip-The tooltip role defines as its msg type.It consist of dynamic id.</p>\n    </amexio-box>\n  </amexio-api-accessible>\n  <amexio-api-demo>\n    <amexio-row>\n\n      <amexio-column [size]="6">\n        <amexio-card [header]="true">\n          <amexio-header>\n            Text Field. Example: 1\n          </amexio-header>\n          <amexio-body>\n              <amexio-text-input [pattern]="\'\\d{5}\'"  [place-holder]="\'XXXXX\'"  \n              [amexio-mask-pattern]="\'XXXXX\'" [field-label]="\'Zip\'"\n              [(ngModel)]="zip"></amexio-text-input>\n          </amexio-body>\n        </amexio-card>\n      </amexio-column>\n      <amexio-column size="6">\n          <amexio-card [header]="true">\n            <amexio-header>\n                Text Field. Example: 2\n              </amexio-header>\n            <amexio-body>\n                <amexio-text-input [pattern]="\'\\d{3}\\s\\d{3}\'"  [place-holder]="\'XXX XXX\'"  \n                [amexio-mask-pattern]="\'XXX XXX\'" [field-label]="\'Canadian Zip Code \'"\n                [(ngModel)]="canadianZipCode "></amexio-text-input>\n            </amexio-body>\n          </amexio-card>\n        </amexio-column>\n    </amexio-row>\n    <amexio-row>\n   \n      <amexio-column [size]="6">\n        <amexio-card [header]="true">\n          <amexio-header>\n              Text Field. Example: 3\n            </amexio-header>\n          <amexio-body>\n              <amexio-text-input [pattern]="\'\\(\\d{3}\\)\\s\\d{3}-\\d{4}\'"  [place-holder]="\'(XXX) XXX-XXXX\'"  \n              [amexio-mask-pattern]="\'(XXX) XXX-XXXX\'" [field-label]="\'Telephone\'"\n              [(ngModel)]="telephone"></amexio-text-input>\n          </amexio-body>\n        </amexio-card>\n      </amexio-column>\n      <amexio-column size="6">\n          <amexio-card header="true">\n            <amexio-header>\n                Text Field. Example: 4\n              </amexio-header>\n            <amexio-body>\n                <amexio-text-input [pattern]="\'\\d{4}\\s\\d{4}\\s\\d{4}\\s\\d{4}\'"  [place-holder]="\'XXXX XXXX XXXX XXXX\'"  \n                [amexio-mask-pattern]="\'XXXX XXXX XXXX XXXX\'" [field-label]="\'Credit Card number\'"\n                [(ngModel)]="ccNumber"></amexio-text-input>\n            </amexio-body>\n          </amexio-card>\n        </amexio-column>\n    </amexio-row>\n    <amexio-row>\n   \n        <amexio-column [size]="6">\n          <amexio-card [header]="true">\n            <amexio-header>\n                NUmber Field. Example: 5\n              </amexio-header>\n            <amexio-body>\n                <amexio-number-input [pattern]="\'\\d{2}\\.\\d{2}\'"  [place-holder]="\'HH.MM\'"  \n                [amexio-mask-pattern]="\'XX.XX\'" [field-label]="\'Time\'"\n                [(ngModel)]="time"></amexio-number-input>\n            </amexio-body>\n          </amexio-card>\n        </amexio-column>\n        <amexio-column size="6">\n            <amexio-card header="true">\n              <amexio-header>\n                  Number Field. Example: 6\n                </amexio-header>\n              <amexio-body>\n                  <amexio-number-input [pattern]="\'\\d{4}\\.\\d{2}\'"  [place-holder]="\'0000.00\'"  \n                  [amexio-mask-pattern]="\'XXXX.XX\'" [field-label]="\'Amount\'"\n                  [(ngModel)]="amount"></amexio-number-input>\n              </amexio-body>\n            </amexio-card>\n          </amexio-column>\n      </amexio-row>\n  </amexio-api-demo>\n</amexio-api-structure>'},IwQQ:function(e,o,a){"use strict";a.r(o);var t=a("CcnG"),n=a("O4vx"),i=a("gIcY"),r=a("Ip0R"),l=a("t/Na"),c=a("d2mR"),m=a("ZYCi"),d=a("JQBr"),p=a("9NvV"),u=function(e,o,a,t){var n,i=arguments.length,r=i<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,a,t);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(i<3?n(r):i>3?n(o,a,r):n(o,a))||r);return i>3&&r&&Object.defineProperty(o,a,r),r},x=function(e,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,o)},s=function(){function e(e,o,a,t){this._cookieService=e,this.httpService=o,this.http=a,this.router=t,this.inputData=[{input:"color-palette",data:"values are classic, vibrant, random, specific. Default: classic"},{input:"gradient",data:"If set true, provides linear gradient effect for particular theme applied."}],this.componentData=[]}return e.prototype.ngOnInit=function(){this.fetchJsonData()},e.prototype.onRowSelect=function(e){this.router.navigate([e.link])},e.prototype.paletteColorTheme=function(e){var o,a=this;this.themeData=JSON.parse(this._cookieService.get("theme-info")),this.httpService.fetch("https://api.amexio.org/api/mda/"+this.themeData.themeName+".json").subscribe(function(e){o=e},function(e){},function(){var t=o.themeColor;e.forEach(function(e){"amexio-theme-color1"===e.colorpalette&&(e.actualColor.bgColor=t[1].value,e.actualColor.fgcolor=t[28].value),"amexio-theme-color2"===e.colorpalette&&(e.actualColor.bgColor=t[2].value,e.actualColor.fgcolor=t[29].value),"amexio-theme-color3"===e.colorpalette&&(e.actualColor.bgColor=t[3].value,e.actualColor.fgcolor=t[30].value),"amexio-theme-color4"===e.colorpalette&&(e.actualColor.bgColor=t[4].value,e.actualColor.fgcolor=t[31].value),"amexio-theme-color5"===e.colorpalette&&(e.actualColor.bgColor=t[5].value,e.actualColor.fgcolor=t[32].value),"amexio-theme-color6"===e.colorpalette&&(e.actualColor.bgColor=t[6].value,e.actualColor.fgcolor=t[33].value)}),a.componentData=e})},e.prototype.fetchJsonData=function(){var e,o=this;this.httpService.fetch("assets/theme.json").subscribe(function(o){e=o},function(e){},function(){var a=e;o.paletteColorTheme(a)})},e=u([Object(t.n)({selector:"color-palette-demo",template:a("jF7z")}),x("design:paramtypes",[d.a,p.a,l.a,m.d])],e)}(),b=function(e,o,a,t){var n,i=arguments.length,r=i<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,a,t);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(i<3?n(r):i>3?n(o,a,r):n(o,a))||r);return i>3&&r&&Object.defineProperty(o,a,r),r},f=function(e,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,o)},h=function(){function e(){}return e.prototype.onCopyClick=function(){this.copyMsgArray.length>=1?(this.copyMsgArray=[],this.copyMsgArray.push({msg:"Code Copied",type:"info"})):this.copyMsgArray.push({msg:"Code Copied",type:"info"})},e=b([Object(t.n)({selector:"input-mask-demo",template:a("IOFq")}),f("design:paramtypes",[])],e)}(),X=[{path:"color-palette",component:s},{path:"input-mask",component:h}];a.d(o,"DirectiveModule",function(){return y});var g=function(e,o,a,t){var n,i=arguments.length,r=i<3?o:null===t?t=Object.getOwnPropertyDescriptor(o,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,a,t);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(i<3?n(r):i>3?n(o,a,r):n(o,a))||r);return i>3&&r&&Object.defineProperty(o,a,r),r},y=function(){function e(){}return e=g([Object(t.J)({declarations:[s,h],imports:[r.b,i.d,l.b,c.a.forRoot(),n.j,m.e.forChild(X)],providers:[]})],e)}()},jF7z:function(e,o){e.exports='<amexio-row>\n  <amexio-column size="12">\n    <amexio-card [header]="true">\n      <amexio-header>\n        Color Palette Directive\n      </amexio-header>\n      <amexio-body>\n        <amexio-tab-view [closable]="false">\n          <amexio-tab title="Introduction" [active]="true">\n            <amexio-card [header]="true">\n              <amexio-header>\n                Directive: amexioColorPalette\n              </amexio-header>\n              <amexio-body>\n                <amexio-datagrid [enable-column-filter]="false" [data]="inputData">\n                  <amexio-data-table-column [data-index]="\'input\'" [data-type]="\'string\'" [width]="30" [hidden]="false" [text]="\'Input\'">\n                  </amexio-data-table-column>\n                  <amexio-data-table-column [data-index]="\'data\'" [data-type]="\'string\'" [hidden]="false" [text]="\'Description\'">\n                  </amexio-data-table-column>\n                </amexio-datagrid>\n\n                <amexio-box\n                  [padding]="true" [closable]="false" align="left">\n                  <b>Classic: </b>\n                  Current State of Two colors: theme color1 and theme color2\n                  <br>\n                  <b>Vibrant: </b>\n                  <br> NavBar = Theme Color 1\n                  <br> Panel Header = Theme Color 2\n                  <br> Accordion / Tabs = Theme Color 3\n                  <br> Card Header = Theme Color 4\n                  <br> Grid Header = Theme Color 5\n                  <br> Window / Dialog / box= Theme Color 6\n                  <br>\n                  <b>Random:</b>\n                  <br>\n                  Except for the NavBar, all other components can pick up a random color for the Header. panel, Accordion,\n                    Tabs, Card, Grid, Window, Dialog, box\n                </amexio-box>\n              </amexio-body>\n            </amexio-card>\n          </amexio-tab>\n          <amexio-tab title="Color-palette">\n              <amexio-datagrid  *ngIf="componentData" [enable-column-filter]="false" [data]="componentData" (rowSelect)="onRowSelect($event)">\n                  <amexio-data-table-column [data-index]="\'componentName\'" [data-type]="\'string\'" [width]="30" [hidden]="false" [text]="\'Component\'">\n                  </amexio-data-table-column>\n                  <amexio-data-table-column [data-index]="\'colorpalette\'" [data-type]="\'string\'" [hidden]="false" [text]="\'Default Color\'">\n                    </amexio-data-table-column>\n                    <amexio-data-table-column [data-index]="\'actualColor.bgColor\'" [data-type]="\'string\'" [hidden]="false" [text]="\'Actual Color\'">\n                        <ng-template #amexioBodyTmpl let-column let-row="row">\n                            <amexio-label class="fa fa-square" [ngStyle]="{\'color\': row.actualColor.bgColor}"></amexio-label>\n                            &nbsp;{{row.actualColor.bgColor}}\n                          &nbsp; &nbsp;\n                              <amexio-label class="fa fa-square" [ngStyle]="{\'color\': row.actualColor.fgcolor}" style="border: 1px solid black"></amexio-label>\n                              &nbsp;{{row.actualColor.fgcolor}}\n                            </ng-template> \n\n                    </amexio-data-table-column>\n                </amexio-datagrid>\n          </amexio-tab>\n        </amexio-tab-view>\n      </amexio-body>\n    </amexio-card>\n  </amexio-column>\n</amexio-row>'}}]);